import { useEffect, useState } from "react";
import toast from "react-hot-toast";
import API from "../../services/api";

export default function AdminUsers() {
  const [users, setUsers] = useState([]);
  const [roles, setRoles] = useState([]);
  const [search, setSearch] = useState("");

  // üîπ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  const fetchUsers = async () => {
    try {
      const res = await API.get("/users");
      setUsers(res.data);
    } catch (err) {
      toast.error("‚ùå L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng!");
      console.error(err);
    }
  };

  // üîπ L·∫•y danh s√°ch vai tr√≤ (t·ª´ b·∫£ng roles)
  const fetchRoles = async () => {
    try {
      const res = await API.get("/roles");
      setRoles(res.data);
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i vai tr√≤:", err);
    }
  };

  useEffect(() => {
    fetchUsers();
    fetchRoles();
  }, []);

  // üîπ C·∫≠p nh·∫≠t quy·ªÅn ho·∫∑c tr·∫°ng th√°i ng∆∞·ªùi d√πng
  const handleUpdate = async (id, field, value) => {
    try {
      const payload =
        field === "role_id"
          ? { role_id: value }
          : field === "status"
          ? { status: value }
          : {};

      await API.put(`/users/${id}`, payload);
      toast.success("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      fetchUsers();
    } catch (err) {
      toast.error("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
      console.error(err);
    }
  };

  // üîπ X√≥a ng∆∞·ªùi d√πng
  const handleDelete = async (id) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?")) {
      try {
        await API.delete(`/users/${id}`);
        toast.success("üóëÔ∏è ƒê√£ x√≥a ng∆∞·ªùi d√πng!");
        fetchUsers();
      } catch {
        toast.error("‚ùå X√≥a th·∫•t b·∫°i!");
      }
    }
  };

  // üîç L·ªçc danh s√°ch theo t·ª´ kh√≥a t√¨m ki·∫øm
  const filteredUsers = users.filter((u) => {
    const keyword = search.toLowerCase();
    return (
      u.name?.toLowerCase().includes(keyword) ||
      u.email?.toLowerCase().includes(keyword)
    );
  });

  return (
    <div className="p-6 space-y-6">
      {/* Ti√™u ƒë·ªÅ v√† √¥ t√¨m ki·∫øm */}
      <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
        <h1 className="text-2xl font-bold text-gray-700">
          üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng
        </h1>
        <input
          type="text"
          placeholder="üîç T√¨m theo t√™n ho·∫∑c email..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="border rounded-lg px-3 py-2 w-72"
        />
      </div>

      {/* B·∫£ng danh s√°ch ng∆∞·ªùi d√πng */}
      <div className="overflow-x-auto bg-white rounded-xl shadow">
        <table className="w-full border-collapse border border-gray-200 text-sm">
          <thead className="bg-blue-600 text-white">
            <tr>
              <th className="p-3">ID</th>
              <th className="p-3">H·ªç t√™n</th>
              <th className="p-3">Email</th>
              <th className="p-3">Vai tr√≤</th>
              <th className="p-3">Tr·∫°ng th√°i</th>
              <th className="p-3">Ng√†y t·∫°o</th>
              <th className="p-3">Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredUsers.length > 0 ? (
              filteredUsers.map((u) => (
                <tr
                  key={u.id}
                  className="border-b hover:bg-blue-50 transition text-gray-700"
                >
                  <td className="p-3 text-center">{u.id}</td>
                  <td className="p-3 font-semibold text-blue-600">{u.name}</td>
                  <td className="p-3">{u.email}</td>

                  {/* Dropdown ch·ªçn role */}
                  <td className="p-3 text-center">
                    <select
                      value={u.role_id}
                      onChange={(e) =>
                        handleUpdate(u.id, "role_id", e.target.value)
                      }
                      className="border rounded px-2 py-1"
                    >
                      {roles.map((r) => (
                        <option key={r.id} value={r.id}>
                          {r.name}
                        </option>
                      ))}
                    </select>
                  </td>

                  {/* Dropdown ch·ªçn tr·∫°ng th√°i */}
                  <td className="p-3 text-center">
                    <select
                      value={u.status}
                      onChange={(e) =>
                        handleUpdate(u.id, "status", e.target.value)
                      }
                      className={`border rounded px-2 py-1 ${
                        u.status === "active"
                          ? "text-green-600"
                          : "text-gray-500"
                      }`}
                    >
                      <option value="active">Ho·∫°t ƒë·ªông</option>
                      <option value="inactive">V√¥ hi·ªáu h√≥a</option>
                    </select>
                  </td>

                  <td className="p-3 text-gray-500 text-center">
                    {new Date(u.created_at).toLocaleString("vi-VN")}
                  </td>

                  <td className="p-3 text-center">
                    <button
                      onClick={() => handleDelete(u.id)}
                      className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                    >
                      X√≥a
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan="7"
                  className="p-6 text-center text-gray-500 italic"
                >
                  Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
