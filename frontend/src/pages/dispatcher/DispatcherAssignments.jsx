import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import API from "../../services/api";

export default function DispatcherAssignments() {
  const [assignments, setAssignments] = useState([]);
  const [unassigned, setUnassigned] = useState([]);
  const [drivers, setDrivers] = useState([]);
  const navigate = useNavigate();

  // üîπ L·∫•y to√†n b·ªô d·ªØ li·ªáu ban ƒë·∫ßu
  const fetchAll = async () => {
    try {
      const [a1, a2, a3] = await Promise.all([
        API.get("/dispatcher/assignments"), // danh s√°ch ƒë√£ ph√¢n c√¥ng
        API.get("/dispatcher/shipments/unassigned"), // ƒë∆°n ch∆∞a ph√¢n c√¥ng
        API.get("/dispatcher/drivers"), // t√†i x·∫ø
      ]);
      setAssignments(a1.data);
      setUnassigned(a2.data);
      setDrivers(a3.data);
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
      toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu");
    }
  };

  useEffect(() => {
    fetchAll();
  }, []);

  // üöö Ph√¢n c√¥ng t√†i x·∫ø cho ƒë∆°n h√†ng (g·ª≠i th√¥ng b√°o realtime)
  const handleAssign = async (shipment_id, driver_id) => {
    try {
      await API.post("/shipments/assign", { shipment_id, driver_id }); // ‚úÖ API m·ªõi
      toast.success("‚úÖ ƒê√£ ph√¢n c√¥ng t√†i x·∫ø v√† g·ª≠i th√¥ng b√°o!");
      fetchAll();
    } catch (err) {
      console.error("‚ùå L·ªói khi ph√¢n c√¥ng:", err);
      toast.error("‚ùå Ph√¢n c√¥ng th·∫•t b·∫°i!");
    }
  };

  // üîÅ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
  const handleStatusChange = async (id, newStatus) => {
    try {
      await API.put(`/dispatcher/assignments/${id}`, { status: newStatus });
      toast.success("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
      fetchAll();
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      toast.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
    }
  };

  return (
    <div className="p-6 space-y-8">
      <h1 className="text-3xl font-bold text-blue-700">
        üöö Qu·∫£n l√Ω ph√¢n c√¥ng t√†i x·∫ø
      </h1>

      {/* ====== ƒê∆°n h√†ng ch∆∞a ph√¢n c√¥ng ====== */}
      <div className="bg-white p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold mb-3 text-gray-800">
          üïí ƒê∆°n h√†ng ch∆∞a ph√¢n c√¥ng
        </h2>
        <table className="w-full text-sm border border-gray-200">
          <thead className="bg-blue-600 text-white">
            <tr>
              <th className="p-2">M√£ ƒë∆°n</th>
              <th className="p-2">Ng∆∞·ªùi g·ª≠i</th>
              <th className="p-2">Ng∆∞·ªùi nh·∫≠n</th>
              <th className="p-2">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {unassigned.length > 0 ? (
              unassigned.map((s) => (
                <tr key={s.id} className="border-b hover:bg-blue-50">
                  <td className="p-2 font-semibold text-blue-700">
                    {s.tracking_code}
                  </td>
                  <td className="p-2">{s.sender_name}</td>
                  <td className="p-2">{s.receiver_name}</td>
                  <td className="p-2">
                    <select
                      onChange={(e) =>
                        handleAssign(s.id, e.target.value || null)
                      }
                      defaultValue=""
                      className="border rounded px-2 py-1"
                    >
                      <option value="">-- Ch·ªçn t√†i x·∫ø --</option>
                      {drivers.map((d) => (
                        <option key={d.id} value={d.id}>
                          {d.name} ({d.vehicle_type})
                        </option>
                      ))}
                    </select>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan="4"
                  className="p-3 text-center text-gray-500 italic"
                >
                  ‚úÖ T·∫•t c·∫£ ƒë∆°n ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* ====== Danh s√°ch ph√¢n c√¥ng ====== */}
      <div className="bg-white p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold mb-3 text-gray-800">
          üìã Danh s√°ch ph√¢n c√¥ng
        </h2>
        <table className="w-full text-sm border border-gray-200">
          <thead className="bg-green-600 text-white">
            <tr>
              <th className="p-2">M√£ ƒë∆°n</th>
              <th className="p-2">T√†i x·∫ø</th>
              <th className="p-2">Ph∆∞∆°ng ti·ªán</th>
              <th className="p-2">Tr·∫°ng th√°i</th>
              <th className="p-2">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {assignments.length > 0 ? (
              assignments.map((a) => (
                <tr key={a.id} className="border-b hover:bg-green-50">
                  <td className="p-2 font-semibold text-green-700">
                    {a.tracking_code}
                  </td>
                  <td className="p-2">{a.driver_name}</td>
                  <td className="p-2">{a.vehicle_type}</td>
                  <td className="p-2">
                    <select
                      value={a.assignment_status}
                      onChange={(e) => handleStatusChange(a.id, e.target.value)}
                      className="border rounded px-2 py-1"
                    >
                      <option value="assigned">ƒê√£ ph√¢n c√¥ng</option>
                      <option value="picking">ƒêang l·∫•y h√†ng</option>
                      <option value="delivering">ƒêang giao h√†ng</option>
                      <option value="completed">Ho√†n t·∫•t</option>
                      <option value="failed">Th·∫•t b·∫°i</option>
                    </select>
                  </td>
                  <td className="p-2 text-center flex justify-center gap-2">
                    <button
                      onClick={() =>
                        navigate(`/dispatcher/tracking/${a.shipment_id}`)
                      }
                      className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm"
                    >
                      üîç Xem chi ti·∫øt
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan="5"
                  className="p-3 text-center text-gray-500 italic"
                >
                  Kh√¥ng c√≥ ph√¢n c√¥ng n√†o.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
