let onlineDrivers = {}; // { driverId: socketId }
let activeChats = {}; // { customerId: chatId }

export default function initSocket(io, pool) {
  io.on("connection", (socket) => {
    console.log("‚ö° Socket connected:", socket.id);

    // üü¢ Khi t√†i x·∫ø ƒëƒÉng k√Ω
    socket.on("registerDriver", (driverId) => {
      onlineDrivers[driverId] = socket.id;
      console.log(`üöö Driver #${driverId} online (${socket.id})`);
    });

    // üü£ Dispatcher v√†o h·ªá th·ªëng chat
    socket.on("joinDispatcher", () => {
      socket.join("dispatcherRoom");
      console.log("üü£ Dispatcher joined room: dispatcherRoom");
    });

    // üü£ Dispatcher tham gia chat c·ª• th·ªÉ
    socket.on("joinChat", (chatId) => {
      socket.join(`chat_${chatId}`);
      console.log(`üü£ Dispatcher joined chat_${chatId}`);
    });

    // üí¨ Khi kh√°ch h√†ng b·∫Øt ƒë·∫ßu chat
    socket.on("startChat", async (customerId) => {
      try {
        // üîç Ki·ªÉm tra xem kh√°ch ƒë√£ c√≥ chat ƒëang m·ªü ch∆∞a
        let [rows] = await pool.query(
          "SELECT * FROM chats WHERE customer_id=? AND status='active'",
          [customerId]
        );

        let chatId;
        if (rows.length > 0) {
          chatId = rows[0].id;
        } else {
          const [res] = await pool.query(
            "INSERT INTO chats (customer_id, status) VALUES (?, 'active')",
            [customerId]
          );
          chatId = res.insertId;
        }

        activeChats[customerId] = chatId;
        const room = `chat_${chatId}`;
        socket.join(room);
        console.log(`üí¨ Customer #${customerId} joined room: ${room}`);

        // üì¢ B√°o cho Dispatcher c√≥ kh√°ch h√†ng m·ªõi
        io.to("dispatcherRoom").emit("newChat", { chatId, customerId });

        // üïí G·ª≠i tin nh·∫Øn ch√†o t·ª± ƒë·ªông sau 300ms
        setTimeout(async () => {
          const welcomeMsg = {
            chatId,
            senderId: 0,
            role: "dispatcher",
            content:
              "Xin ch√†o üëã! Ch√∫ng t√¥i l√† ƒë·ªôi ng≈© h·ªó tr·ª£ SpeedyShip. B·∫°n c·∫ßn gi√∫p g√¨ h√¥m nay?",
            created_at: new Date(),
          };

          // üíæ L∆∞u v√†o DB
          await pool.query(
            "INSERT INTO messages (chat_id, sender_id, role, content, created_at) VALUES (?, ?, ?, ?, ?)",
            [
              chatId,
              welcomeMsg.senderId,
              welcomeMsg.role,
              welcomeMsg.content,
              welcomeMsg.created_at,
            ]
          );

          // üì¢ G·ª≠i tin nh·∫Øn ch√†o cho kh√°ch h√†ng trong ph√≤ng chat
          io.to(room).emit("newMessage", welcomeMsg);

          // ‚ö° G·ª≠i ri√™ng s·ª± ki·ªán welcomeMessage cho dispatcher (tr√°nh tr√πng newMessage)
          io.to("dispatcherRoom").emit("welcomeMessage", welcomeMsg);

          // üîî G·ª≠i t√≠n hi·ªáu chatStarted cho kh√°ch h√†ng
          io.to(socket.id).emit("chatStarted", chatId);
        }, 300);
      } catch (err) {
        console.error("‚ùå L·ªói startChat:", err.message);
      }
    });

    // ‚úâÔ∏è Khi c√≥ tin nh·∫Øn m·ªõi
    socket.on("sendMessage", async (msg) => {
      const { chatId, senderId, role, content } = msg;
      const time = new Date();
      const room = `chat_${chatId}`;

      try {
        // üíæ L∆∞u tin nh·∫Øn v√†o DB
        await pool.query(
          "INSERT INTO messages (chat_id, sender_id, role, content, created_at) VALUES (?, ?, ?, ?, ?)",
          [chatId, senderId, role, content, time]
        );

        // üì¢ G·ª≠i tin nh·∫Øn t·ªõi ph√≤ng chat (c·∫£ kh√°ch & dispatcher ƒëang m·ªü)
        io.to(room).emit("newMessage", {
          chatId,
          senderId,
          role,
          content,
          created_at: time,
        });

        // ‚ö†Ô∏è Ch·ªâ g·ª≠i th√¥ng b√°o ri√™ng t·ªõi dispatcherRoom n·∫øu kh√°ch h√†ng g·ª≠i
        if (role === "customer") {
          io.to("dispatcherRoom").emit("customerMessage", {
            chatId,
            senderId,
            role,
            content,
            created_at: time,
          });
        }
      } catch (err) {
        console.error("‚ùå L·ªói sendMessage:", err.message);
      }
    });

    // üî¥ Khi kh√°ch h√†ng k·∫øt th√∫c chat
    socket.on("endChat", async (customerId) => {
      const chatId = activeChats[customerId];
      if (!chatId) return;

      try {
        await pool.query(
          "UPDATE chats SET status='closed', ended_at=NOW() WHERE id=?",
          [chatId]
        );

        io.to(`chat_${chatId}`).emit("chatEnded", chatId);
        io.to("dispatcherRoom").emit("chatClosed", chatId);

        delete activeChats[customerId];
        console.log(`‚ùå Chat #${chatId} closed by customer`);
      } catch (err) {
        console.error("‚ùå L·ªói endChat:", err.message);
      }
    });

    // üî¥ Khi socket ng·∫Øt k·∫øt n·ªëi
    socket.on("disconnect", () => {
      for (let id in onlineDrivers) {
        if (onlineDrivers[id] === socket.id) delete onlineDrivers[id];
      }
      console.log(`üî¥ Socket disconnected: ${socket.id}`);
    });
  });

  // ======================================
  // üîî G·ª≠i th√¥ng b√°o cho t√†i x·∫ø (driver)
  // ======================================
  return {
    sendNotificationToDriver: async (driverId, shipmentId, message) => {
      try {
        await pool.query(
          "INSERT INTO notifications (driver_id, shipment_id, message) VALUES (?, ?, ?)",
          [driverId, shipmentId, message]
        );

        const socketId = onlineDrivers[driverId];
        if (socketId) {
          io.to(socketId).emit("newNotification", { shipmentId, message });
        }

        console.log(`üì¢ G·ª≠i th√¥ng b√°o t·ªõi driver #${driverId}: ${message}`);
      } catch (err) {
        console.error("‚ùå L·ªói g·ª≠i th√¥ng b√°o:", err.message);
      }
    },
  };
}
