import pool from "../config/db.js";

// üìÑ L·∫•y th√¥ng tin h·ªì s∆° kh√°ch h√†ng
export const getCustomerProfile = async (req, res) => {
  try {
    const [rows] = await pool.query(
      "SELECT id, name, email, phone, status FROM users WHERE id = ? AND role = 'customer'",
      [req.params.id]
    );
    if (rows.length === 0)
      return res.status(404).json({ message: "Customer not found" });
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t h·ªì s∆° kh√°ch h√†ng
export const updateCustomerProfile = async (req, res) => {
  const { name, email, phone } = req.body;
  try {
    await pool.query(
      "UPDATE users SET name = ?, email = ?, phone = ? WHERE id = ? AND role = 'customer'",
      [name, email, phone, req.params.id]
    );
    res.json({ message: "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// 3Ô∏è‚É£ T·∫°o ƒë∆°n h√†ng m·ªõi
export const createShipment = async (req, res) => {
  const {
    customer_id,
    sender_name,
    sender_phone,
    receiver_name,
    receiver_phone,
    pickup_address,
    delivery_address,
    weight_kg,
    cod_amount,
  } = req.body;

  try {
    const tracking = `SP${Date.now().toString().slice(-6)}`;
    const [result] = await pool.query(
      `INSERT INTO shipments(
        tracking_code, customer_id, sender_name, sender_phone,
        receiver_name, receiver_phone, pickup_address, delivery_address,
        weight_kg, cod_amount, status
      ) VALUES (?,?,?,?,?,?,?,?,?,?, 'pending')`,
      [
        tracking,
        customer_id,
        sender_name,
        sender_phone,
        receiver_name,
        receiver_phone,
        pickup_address,
        delivery_address,
        weight_kg,
        cod_amount,
      ]
    );

    res.json({
      message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
      shipment_id: result.insertId,
      tracking_code: tracking,
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// 4Ô∏è‚É£ L·∫•y danh s√°ch ƒë∆°n h√†ng theo kh√°ch h√†ng
export const getShipmentsByCustomer = async (req, res) => {
  try {
    const [rows] = await pool.query(
      "SELECT * FROM shipments WHERE customer_id = ? ORDER BY created_at DESC",
      [req.params.customer_id]
    );
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// 5Ô∏è‚É£ G·ª≠i feedback
export const createFeedback = async (req, res) => {
  const { customer_id, shipment_id, content, rating } = req.body;
  try {
    await pool.query(
      "INSERT INTO feedbacks (customer_id, shipment_id, content, rating, created_at) VALUES (?,?,?,?,NOW())",
      [customer_id, shipment_id, content, rating]
    );
    res.json({ message: "Feedback submitted successfully" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// 6Ô∏è‚É£ Theo d√µi ƒë∆°n h√†ng theo m√£ (tracking_code)
export const trackShipment = async (req, res) => {
  try {
    const { code } = req.params;
    const [rows] = await pool.query(
      "SELECT * FROM shipments WHERE tracking_code = ?",
      [code]
    );
    if (rows.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// 7Ô∏è‚É£ Xem chi ti·∫øt ƒë∆°n h√†ng (hi·ªÉn th·ªã v·ªã tr√≠ t√†i x·∫ø)
export const getShipmentDetail = async (req, res) => {
  try {
    const [rows] = await pool.query(
      `SELECT 
          s.*, 
          d.name AS driver_name,
          d.latitude AS driver_lat,
          d.longitude AS driver_lng
       FROM shipments s
       LEFT JOIN assignments a ON a.shipment_id = s.id
       LEFT JOIN drivers d ON a.driver_id = d.id
       WHERE s.id = ?`,
      [req.params.id]
    );

    if (!rows.length)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói SQL:", err);
    res.status(500).json({ message: err.message });
  }
};
