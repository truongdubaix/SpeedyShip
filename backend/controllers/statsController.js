import { db } from "../config/db.js";

// =====================
// üßÆ L·∫•y th·ªëng k√™ t·ªïng th·ªÉ Dashboard
// =====================
export const getShipmentStats = async (req, res) => {
  try {
    // 1Ô∏è‚É£ T·ªïng s·ªë ƒë∆°n, s·ªë ƒë∆°n ƒë√£ giao, doanh thu
    const [summary] = await db.execute(`
      SELECT 
        COUNT(*) AS total_orders,
        SUM(CASE WHEN status = 'ƒê√£ giao' THEN 1 ELSE 0 END) AS completed_orders,
        IFNULL(SUM(fee), 0) AS revenue
      FROM shipments
    `);

    // 2Ô∏è‚É£ Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông (ƒë·∫øm user c√≥ ƒë∆°n h√†ng)
    const [activeUsers] = await db.execute(`
      SELECT COUNT(DISTINCT user_id) AS active_users
      FROM shipments
      WHERE user_id IS NOT NULL
    `);

    // 3Ô∏è‚É£ D·ªØ li·ªáu bi·ªÉu ƒë·ªì: s·ªë ƒë∆°n theo th√°ng
    const [chart] = await db.execute(`
      SELECT 
        DATE_FORMAT(created_at, '%m') AS month,
        COUNT(*) AS orders
      FROM shipments
      GROUP BY month
      ORDER BY month
    `);

    res.json({
      total_orders: summary[0].total_orders || 0,
      completed_orders: summary[0].completed_orders || 0,
      revenue: summary[0].revenue || 0,
      active_users: activeUsers[0].active_users || 0,
      chartData: chart || [],
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y th·ªëng k√™:", err);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß khi l·∫•y d·ªØ li·ªáu th·ªëng k√™" });
  }
};
