import db from "../config/db.js";
import { sendNotificationToDriver } from "../server.js";

/**
 * üßæ L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng
 */
export const getAllShipments = async (req, res) => {
  try {
    const [rows] = await db.query(
      "SELECT * FROM shipments ORDER BY created_at DESC"
    );
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng" });
  }
};

/**
 * üß≠ L·∫•y chi ti·∫øt 1 ƒë∆°n h√†ng (k√®m t·ªça ƒë·ªô)
 */
export const getShipmentById = async (req, res) => {
  try {
    const { id } = req.params;
    const [rows] = await db.query("SELECT * FROM shipments WHERE id = ?", [id]);
    if (!rows.length)
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng" });
  }
};

/**
 * ‚ûï T·∫°o ƒë∆°n h√†ng m·ªõi (m√¥ ph·ªèng v·ªã tr√≠ quanh ƒê√† N·∫µng)
 */
export const createShipment = async (req, res) => {
  try {
    const {
      tracking_code,
      customer_id,
      sender_name,
      sender_phone,
      receiver_name,
      receiver_phone,
      pickup_address,
      delivery_address,
      weight_kg,
      cod_amount,
      status,
      current_location,
    } = req.body;

    // üìç M√¥ ph·ªèng v·ªã tr√≠ ng·∫´u nhi√™n quanh ƒê√† N·∫µng
    const baseLat = 16.054407; // trung t√¢m ƒê√† N·∫µng
    const baseLng = 108.202167; // trung t√¢m ƒê√† N·∫µng
    const randomOffset = () => (Math.random() - 0.5) / 100; // l·ªách trong b√°n k√≠nh ~1km
    const latitude = baseLat + randomOffset();
    const longitude = baseLng + randomOffset();

    // üîπ Th√™m ƒë∆°n h√†ng v√†o CSDL (c√≥ c·∫£ to·∫° ƒë·ªô)
    await db.query(
      `INSERT INTO shipments 
      (tracking_code, customer_id, sender_name, sender_phone, receiver_name, receiver_phone, pickup_address, delivery_address, weight_kg, cod_amount, status, current_location, latitude, longitude)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        tracking_code,
        customer_id,
        sender_name,
        sender_phone,
        receiver_name,
        receiver_phone,
        pickup_address,
        delivery_address,
        weight_kg,
        cod_amount,
        status || "pending",
        current_location || "",
        latitude,
        longitude,
      ]
    );

    res.json({
      message: "‚úÖ T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng (v·ªã tr√≠ m√¥ ph·ªèng quanh ƒê√† N·∫µng)",
      location: { latitude, longitude },
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng m·ªõi" });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
 */
export const updateShipment = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      sender_name,
      sender_phone,
      receiver_name,
      receiver_phone,
      pickup_address,
      delivery_address,
      weight_kg,
      cod_amount,
      status,
      current_location,
    } = req.body;

    await db.query(
      `UPDATE shipments 
       SET sender_name=?, sender_phone=?, receiver_name=?, receiver_phone=?, 
           pickup_address=?, delivery_address=?, weight_kg=?, cod_amount=?, 
           status=?, current_location=?, updated_at=NOW()
       WHERE id=?`,
      [
        sender_name,
        sender_phone,
        receiver_name,
        receiver_phone,
        pickup_address,
        delivery_address,
        weight_kg,
        cod_amount,
        status,
        current_location,
        id,
      ]
    );

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng" });
  }
};

/**
 * üîÅ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ri√™ng
 */
export const updateShipmentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    await db.query(
      "UPDATE shipments SET status=?, updated_at=NOW() WHERE id=?",
      [status, id]
    );
    res.json({ message: "üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng" });
  }
};

/**
 * üóëÔ∏è X√≥a ƒë∆°n h√†ng
 */
export const deleteShipment = async (req, res) => {
  try {
    const { id } = req.params;
    await db.query("DELETE FROM shipments WHERE id=?", [id]);
    res.json({ message: "üóëÔ∏è ƒê√£ x√≥a ƒë∆°n h√†ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a ƒë∆°n h√†ng:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng" });
  }
};

/**
 * üöö Ph√¢n c√¥ng t√†i x·∫ø (Dispatcher)
 */
export const assignShipment = async (req, res) => {
  try {
    const { driver_id, shipment_id } = req.body;

    if (!driver_id || !shipment_id) {
      return res
        .status(400)
        .json({ error: "Thi·∫øu driver_id ho·∫∑c shipment_id" });
    }

    // 1Ô∏è‚É£ C·∫≠p nh·∫≠t shipment sang tr·∫°ng th√°i 'assigned'
    await db.query(
      "UPDATE shipments SET status = 'assigned', updated_at = NOW() WHERE id = ?",
      [shipment_id]
    );

    // 2Ô∏è‚É£ Ghi l·ªãch s·ª≠ ph√¢n c√¥ng
    await db.query(
      "INSERT INTO assignments (shipment_id, driver_id, status) VALUES (?, ?, 'assigned')",
      [shipment_id, driver_id]
    );

    // 3Ô∏è‚É£ G·ª≠i th√¥ng b√°o realtime
    const message = `B·∫°n v·ª´a ƒë∆∞·ª£c ph√¢n c√¥ng ƒë∆°n h√†ng #${shipment_id}`;
    await sendNotificationToDriver(driver_id, shipment_id, message);

    // 4Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i x·∫ø
    await db.query("UPDATE drivers SET status='delivering' WHERE id = ?", [
      driver_id,
    ]);

    res.json({
      message: "‚úÖ ƒê√£ ph√¢n c√¥ng ƒë∆°n h√†ng v√† g·ª≠i th√¥ng b√°o t·ªõi t√†i x·∫ø",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi ph√¢n c√¥ng t√†i x·∫ø:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ ph√¢n c√¥ng t√†i x·∫ø" });
  }
};
