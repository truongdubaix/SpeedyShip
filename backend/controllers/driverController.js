import db from "../config/db.js";
import bcrypt from "bcryptjs";

// =================== üìä Dashboard ===================
export const getDriverDashboard = async (req, res) => {
  try {
    const { id } = req.params;
    const [rows] = await db.query(
      `
      SELECT 
        COUNT(CASE WHEN s.status = 'completed' THEN 1 END) AS completed,
        COUNT(CASE WHEN s.status = 'delivering' THEN 1 END) AS delivering,
        COUNT(CASE WHEN s.status = 'picking' THEN 1 END) AS picking,
        COUNT(CASE WHEN s.status = 'assigned' THEN 1 END) AS assigned
      FROM shipments s
      JOIN assignments a ON s.id = a.shipment_id
      WHERE a.driver_id = ?
      `,
      [id]
    );

    const stats = rows[0] || {
      completed: 0,
      delivering: 0,
      picking: 0,
      assigned: 0,
    };

    res.json(stats);
  } catch (err) {
    console.error("‚ùå L·ªói getDriverDashboard:", err);
    res.status(500).json({ message: err.message || "L·ªói khi l·∫•y dashboard" });
  }
};

// =================== üöö Danh s√°ch ƒë∆°n h√†ng ƒëang giao ===================
export const getDriverAssignments = async (req, res) => {
  try {
    const { id } = req.params;
    const [rows] = await db.query(
      `
      SELECT 
        s.id AS shipment_id,
        s.tracking_code,
        s.delivery_address,
        s.status,
        a.status AS assignment_status
      FROM assignments a
      JOIN shipments s ON s.id = a.shipment_id
      WHERE a.driver_id = ? 
        AND a.status IN ('assigned', 'picking', 'delivering')
      ORDER BY a.assigned_at DESC
      `,
      [id]
    );
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói getDriverAssignments:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n t√†i x·∫ø" });
  }
};

// =================== üßæ L·ªãch s·ª≠ giao h√†ng ===================
export const getDriverHistory = async (req, res) => {
  try {
    const { id } = req.params;
    const [rows] = await db.query(
      `
      SELECT 
        s.tracking_code,
        s.delivery_address,
        s.status,
        a.assigned_at AS completed_at
      FROM assignments a
      JOIN shipments s ON s.id = a.shipment_id
      WHERE a.driver_id = ? AND a.status = 'completed'
      ORDER BY a.assigned_at DESC
      `,
      [id]
    );
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói getDriverHistory:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y l·ªãch s·ª≠ giao h√†ng" });
  }
};

// =================== üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n ===================
export const updateDriverShipmentStatus = async (req, res) => {
  try {
    const { shipment_id } = req.params;
    const { status } = req.body;

    await db.query("UPDATE shipments SET status = ? WHERE id = ?", [
      status,
      shipment_id,
    ]);
    await db.query("UPDATE assignments SET status = ? WHERE shipment_id = ?", [
      status,
      shipment_id,
    ]);

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói updateDriverShipmentStatus:", err);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
  }
};

// =================== üë§ H·ªì s∆° t√†i x·∫ø ===================
export const getDriverProfile = async (req, res) => {
  try {
    const { id } = req.params;
    const [rows] = await db.query(
      `
      SELECT 
        d.id, 
        d.name, 
        d.email, 
        d.phone, 
        d.status,
        v.plate_no,
        v.type,
        v.capacity_kg,
        v.status AS vehicle_status
      FROM drivers d
      LEFT JOIN vehicles v ON d.vehicle_id = v.id
      WHERE d.id = ?
      `,
      [id]
    );

    if (rows.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i x·∫ø" });

    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói getDriverProfile:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin t√†i x·∫ø" });
  }
};

// =================== üîê ƒê·ªïi m·∫≠t kh·∫©u ===================
export const changeDriverPassword = async (req, res) => {
  try {
    const { id } = req.params;
    const { oldPassword, newPassword } = req.body;

    const [[driver]] = await db.query(
      "SELECT password FROM drivers WHERE id = ?",
      [id]
    );
    if (!driver)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i x·∫ø" });

    const isMatch = await bcrypt.compare(oldPassword, driver.password);
    if (!isMatch)
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });

    const hash = await bcrypt.hash(newPassword, 10);
    await db.query("UPDATE drivers SET password = ? WHERE id = ?", [hash, id]);

    res.json({ message: "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói changeDriverPassword:", err);
    res.status(500).json({ message: "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u" });
  }
};

// =================== üöö C·∫≠p nh·∫≠t xe cho t√†i x·∫ø ===================
export const updateDriverVehicle = async (req, res) => {
  try {
    const { id } = req.params; // id t√†i x·∫ø
    const { vehicle_id } = req.body;

    // Ki·ªÉm tra xe c√≥ t·ªìn t·∫°i kh√¥ng
    const [[vehicle]] = await db.query("SELECT * FROM vehicles WHERE id = ?", [
      vehicle_id,
    ]);
    if (!vehicle) return res.status(404).json({ message: "Xe kh√¥ng t·ªìn t·∫°i" });

    // G√°n xe cho t√†i x·∫ø
    await db.query("UPDATE drivers SET vehicle_id = ? WHERE id = ?", [
      vehicle_id,
      id,
    ]);

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t xe cho t√†i x·∫ø th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t xe cho t√†i x·∫ø:", error);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t xe cho t√†i x·∫ø" });
  }
};
